package com.jerin.utilities;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.ref.WeakReference;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import com.jerin.magicrecipe.dataconstants.MagicRecipeData;

import android.os.AsyncTask;
import android.util.Log;

public class RequestTask extends AsyncTask<String, String, String> {

	private static final String _TAG = RequestTask.class.getSimpleName();
	private WeakReference<IRequestResponseListener> listenerRefernce;

	@Override
	protected String doInBackground(String... uri) {
		HttpClient httpclient = new DefaultHttpClient();
		HttpResponse response;
		String responseString = null;
		try {
			response = httpclient.execute(new HttpGet(uri[0]));
			StatusLine statusLine = response.getStatusLine();
			if (statusLine.getStatusCode() == HttpStatus.SC_OK) {
				ByteArrayOutputStream out = new ByteArrayOutputStream();
				response.getEntity().writeTo(out);
				out.close();
				responseString = out.toString();
			} else {
				// Closes the connection.
				response.getEntity().getContent().close();
				throw new IOException(statusLine.getReasonPhrase());
			}
		} catch (ClientProtocolException e) {
			// Handle problems..
			Log.e(_TAG, e.getMessage());
		} catch (IOException e) {
			// Handle problems..
			Log.e(_TAG, e.getMessage());
		}
		return responseString;
	}

	@Override
	protected void onPostExecute(String response) {
		super.onPostExecute(response);

		// Intimate listener of the response
		if (null != listenerRefernce) {
			IRequestResponseListener requestResponseListener = listenerRefernce.get();
			if (null != requestResponseListener) {
				requestResponseListener.onRequestComplete(response);
			}
		}
	}

	public void setListener(IRequestResponseListener listener) {
		this.listenerRefernce = new WeakReference<RequestTask.IRequestResponseListener>(
				listener);
	}

	public interface IRequestResponseListener {
		void onRequestComplete(String response);
	}
}